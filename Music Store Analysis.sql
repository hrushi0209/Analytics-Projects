
--1) Retrieve all columns from the Customer table.
Select * from customer

--2) Retrieve all columns from the Customer table.
Select 
	name,
	unit_price
From track

--3) Get the names of all employees.
Select 
	first_name,
	last_name
from employee

--4) Find the email addresses of all customers.
Select
	email
From customer

--5) Show all albums released by a specific artist (e.g., "AC/DC").
Select
	a.title,
	ar.name
From album a
Join artist ar
on a.artist_id = ar.artist_id
Where name = 'Ozzy Osbourne'

--6) List all playlists available in the database.
Select * from playlist

--7) Find the total number of tracks.
Select cOUNT(*) from track

--8) Get the list of distinct cities where customers live.

Select Distinct city
from customer

--9) Retrieve the names of all genres.
Select * from genre

--10) Show the details of invoices where the total is greater than 10.

Select * from invoice
Where total > 10

--11) List all albums along with the artist name.
Select 
	a.title,
	ar.name
From album a
join artist ar
on a.artist_id = ar.artist_id

--12) Find the top 10 most expensive tracks.

Select Top 10
	name 
from track
order by unit_price DESC

--13) Get all tracks that are longer than 5 minutes.
Select 
	Name,
	milliseconds
from track
Where milliseconds > 30000

--14) Retrieve all customers along with their invoice totals
Select
	C.first_name,
	c.last_name,
	i.total
From customer C
Join invoice i
on C.customer_id = i.customer_id

--15) Count the number of invoices each customer has.
Select
	c.first_name,
	c.last_name,
	COUNT(i.invoice_id) as Invoice_Count
From customer C
Join invoice i
on c.customer_id = i.customer_id
Group By C.first_name, C.last_name

--16) Show the number of tracks per album.
Select 
a.title,
COUNT(t.track_id) as Track_per_album
from track t
Join album a
on t.album_id = a.album_id
Group By a.title

--17) List tracks with their genre and media type.
Select
	t.name as track_name,
	g.name as genre_name,
	m.name as media_name 
From track t
Join genre g 
on t.genre_id = g.genre_id	
Join media_type m 
on t.media_type_id = m.media_type_id

--18) Retrieve invoices along with customer names and billing cities.
Select
	c.first_name,C.last_name,i.billing_city,i.invoice_id
From customer c
Join invoice I 
On c.customer_id = I.customer_id

--19) Get all tracks in a particular playlist (e.g., PlaylistId = 5).
Select * from track
Select * from playlist
Select * from playlist_track

Select 
	p.name AS playlist_name,
	t.name as track_name,
	t.composer,
	t.milliseconds,
	t.unit_price
From playlist p
Join playlist_track PT
On P.playlist_id = Pt.playlist_id
Join track t 
on t.track_id = pt.track_id
Where p.playlist_id = 5

--20) Show invoice lines with total price (UnitPrice * Quantity).
Select 
	*,
	(unit_price * quantity) as Total
from invoice_line

--21) Get the names of all customers who have made purchases.

Select
	c.first_name,
	c.last_name
From customer c
Inner Join invoice i
on c.customer_id = i.customer_id

--22) List the total revenue generated by each genre.

Select
	g.name as Genere_name,
	Sum(il.unit_price * il.quantity) As Total_Revenue
From genre g
Join track t
On g.genre_id = t.genre_id
Join invoice_line il 
on il.track_id = t.track_id
Group by g.name 

--23) Find the top 5 artists by number of tracks.
Select 
	Top 5
	a.Name As Artist_Name,
	COUNT(t.track_id) as Count_of_tracks
From artist a
Join album Al
on a.artist_id = al.artist_id
Join track t
on t.album_id = al.album_id
Group By a.name
Order by Count_of_tracks DESC

--24) Retrieve the employee and their direct reports using a self join.

Select
	e.first_name as Employee_First_Name,
	e.last_name as Employee_last_Name,
	m.first_name as Manager_First_Name,
	m.last_name as Manager_Last_Name
From employee e
Join employee m 
on e.reports_to = m.employee_id

--25) Calculate the total sales per employee.

Select
	e.first_name,
	e.last_name,
	Sum(il.unit_price * il.Quantity) as Total_Sales
From employee e
Join customer C On E.employee_id = C.support_rep_id
Join invoice i on i.customer_id =c.customer_id
jOIN invoice_line il On i.invoice_id = il.invoice_id
Group By e.first_name, e.last_name

--26) Get the invoice date, customer name, and total amount for each invoice.

Select 
	C.first_name,
	C.last_name,
	i.invoice_date,
	i.total
From customer C
Join invoice I
On C.customer_id = I.customer_id

--27) List the total duration of tracks in each album.

Select
	a.title as Album_Name,
	SUM(t.milliseconds) as Duration
From track t
Join album a 
on t.album_id = a.album_id
Group By a.title

--28) Show the number of playlists each track appears in.

Select 
	t.name as Track_Name,
	Count(p.Playlist_id) as Number_Of_Playlist
From playlist P
Join playlist_track pt
on p.playlist_id = pt.playlist_id
Join track t on pt.track_id = t.track_id
group By t.name

--29) Find the top 3 cities with the highest number of customers.
Select
	Top 3
		city,
		Count(Customer_id) as NumberOfCustomers
from customer
Group By city
Order By NumberOfCustomers Desc

--30) List the average unit price of tracks for each media type.

Select 
	m.name As Media_Type_name,
	Avg(t.unit_price) as Average_Unit_Price
From track t
Join media_type m
On t.media_type_id = m.media_type_id
Group By m.name

--31) Identify customers who have purchased tracks from more than 5 different genres.

Select 
	C.first_name,
	c.last_name,
	Count(Distinct g.genre_id) as NumberOfDifferentGenres
From customer C
Join invoice i On C.customer_id = i.customer_id
Join invoice_line il On i.invoice_id = il.invoice_id
Join track t On t.track_id = il.track_id 
Join genre g On t.genre_id = t.genre_id
Group By c.first_name, c.last_name
Having COUNT(Distinct G.Genre_id) > 5

--32) Rank customers by total spending using window functions
With CustomerSpending AS(
Select
	c.first_name,
	c.last_name,
	Sum(i.total) as Total_Spending
From customer C
Join invoice I
On C.customer_id = i.customer_id
Group By C.first_name, C.last_name)

Select
	first_name,
	last_name,
	Rank() Over(Order by Total_Spending DESC) as SpendingRank
From CustomerSpending
Order by SpendingRank

--33) Get monthly sales revenue using GROUP BY with date functions.

Select
	Format(Invoice_Date, 'yyyy-MM') as SalesMonth,
	Sum(Total) as Total_Revenue
From invoice
Group By Format(Invoice_Date, 'yyyy-MM')
Order by SalesMonth

--34) Find the top 3 selling tracks by total revenue.

Select
	Top 3
		t.Name As Track_Name,
		Sum(il.unit_price * il.quantity) as Total_Revenue
From track t
Join invoice_line il 
on t.track_id = il.track_id
Join invoice i 
on i.invoice_id = il.invoice_id
Group By t.name
Order by Total_Revenue DESc

--35) Create a report showing each artist, their albums, and the total track duration per album.

Select
	a.name as Artist_Name,
	Al.title As Album_Name,
	Sum(t.milliseconds) as Total_Duration
From artist a
Join album Al 
on a.artist_id = al.artist_id
Join track t
on al.album_id = t.album_id
Group By a.name, al.title

--36) Identify employees who have not made any sales.

Select 
	e.first_name,
	e.last_name,
	i.total
from employee e
Left join customer c
on e.employee_id = c.support_rep_id
left Join invoice i 
on c.customer_id = i.customer_id
Where total IS NULL

--37) List customers who have only made one purchase.

Select
	C.first_name,
	c.last_name,
	COUNT(I.Invoice_id) as Invoice_Count
from customer c
Join invoice i 
on c.customer_id = I.customer_id
Group By C.first_name, c.last_name
Having COUNT(I.Invoice_id) =1

--38) Find the most popular genre by number of tracks sold.

Select
	Top 1
	g.name,
	Sum(il.quantity) as Total_quantity
From track t
Join genre g
on t.genre_id = g.genre_id
Join invoice_line il 
on t.track_id = il.track_id
Group by g.name
Order by Total_quantity DESC

--39) Show the invoice count and total amount for each country.

SELECT
    billing_country AS Country,
    COUNT(Invoice_Id) AS InvoiceCount,
    SUM(Total) AS TotalAmount
FROM
    Invoice
GROUP BY
    billing_country
ORDER BY
    TotalAmount DESC; 

--40) Identify playlists that contain tracks from multiple genres.

SELECT
    p.playlist_id,
    p.Name AS PlaylistName,
    COUNT(DISTINCT g.genre_id) AS NumberOfDistinctGenres
FROM
    Playlist p
JOIN
    playlist_track pt ON p.playlist_id = pt.playlist_id
JOIN
    Track t ON pt.track_id = t.track_id
JOIN
    Genre g ON t.genre_id = g.genre_id
GROUP BY
    p.playlist_id, p.Name
HAVING
    COUNT(DISTINCT g.genre_id) > 1
ORDER BY
    NumberOfDistinctGenres DESC

--41) List tracks that are more expensive than the average track price.

Select 
	name,
	unit_price
from track
Where 
	unit_price > (Select AVG(Unit_Price) From Track)

--42) Show customers who spent more than the average customer.

With CustomerTotalSpendings As(
Select
	c.customer_id,
	C.first_name,
	C.last_name,
	Sum(i.total) as TotalSpentPerCustomer
From customer C
Join invoice I
On C.customer_id = i.customer_id
Group By c.customer_id, c.first_name,c.last_name),

AvgCustomerSpending As (
	
Select 
	AVG(TotalSpentPerCustomer) as AverageCustomerSpending
From CustomerTotalSpendings)

Select
	c.first_name,
	c.last_name,
	c.TotalSpentPerCustomer
From CustomerTotalSpendings C,AvgCustomerSpending A
where c.TotalSpentPerCustomer > a.AverageCustomerSpending
Order By TotalSpentPerCustomer

--43) Use a CTE to find the running total of invoice amounts per customer.
With CustomerInvoiceRunningTotal  As (
Select
	customer_id,
	invoice_id,
	invoice_date,
	total,
	Sum(total) Over(Partition By Customer_id Order By Invoice_id, Invoice_date) As Running_Total
From invoice)

Select
	customer_id,
	invoice_id,
	invoice_date,
	total,
	Running_Total
From CustomerInvoiceRunningTotal
Order by customer_id,invoice_date

--44) Find albums that contain only tracks of a single genre.

Select
	a.title as Album_Name,
	COUNT(Distinct g.genre_id) as NumberOfDistinctGenre
From genre g
Join track t
on g.genre_id = t.genre_id
join album a on t.album_id = a.album_id
Group By a.title
Having COUNT(Distinct g.genre_id) = 1

--45)Get the track(s) with the maximum length.
Select 
	name,
	composer,
	milliseconds
from track
Where milliseconds = (Select Max(Milliseconds) From track)

--46) List customers who have never made a purchase.
Select
	c.first_name,
	c.last_name,
	C.customer_id
From customer C
Left Join invoice i
On c.customer_id = i.customer_id
Where i.invoice_id IS Null

--47) Find artists who have more than 3 albums.
Select
	a.name As Artist_name,
	Count( al.album_id) as CountOfAlbums
From artist A
Join album Al
on a.artist_id = al.artist_id
Group By a.name
Having COUNT(al.Album_id) > 3

--48) Get all employees who report to the same manager.

SELECT
    e.First_Name AS EmployeeFirstName,
    e.Last_Name AS EmployeeLastName,
    e.Reports_To AS ManagerId,
    m.First_Name AS ManagerFirstName,
    m.Last_Name AS ManagerLastName
FROM
    Employee e
JOIN
    Employee m ON e.Reports_To = m.Employee_Id
WHERE
    e.Reports_To IS NOT NULL 
ORDER BY
    ManagerId, EmployeeLastName, EmployeeFirstName;

--49) List tracks that belong to the same album and have the same composer.

SELECT
    t.Name AS TrackName,
    a.Title AS AlbumTitle,
    t.Composer
FROM
    Track t
JOIN
    Album a ON t.Album_Id = a.Album_Id
WHERE
    t.Composer IS NOT NULL 
    AND EXISTS (
        SELECT 1
        FROM Track t2
        WHERE
            t2.Album_Id = t.Album_Id AND  
            t2.Composer = t.Composer AND 
            t2.Track_Id <> t.Track_Id      
    )
ORDER BY
    a.Title, t.Composer, t.Name;

--50) Find customers whose support rep is "Nancy Edwards".

SELECT
    c.First_Name AS CustomerFirstName,
    c.Last_Name AS CustomerLastName,
    c.Email AS CustomerEmail
FROM
    Customer c
JOIN
    Employee e ON c.support_rep_id = e.employee_id
WHERE
    e.First_Name = 'Nancy' AND e.Last_Name = 'Edwards';